package com.bankapp.util;

import com.bankapp.model.Account;
import com.bankapp.model.Client;
import com.bankapp.repository.AccountRepository;
import com.bankapp.repository.ClientRepository;
import com.github.javafaker.Faker;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import java.util.Optional;
import java.util.Random;

@Component
public class TestDataInitializer implements CommandLineRunner {
    private final AccountRepository accountRepository;
    private final ClientRepository clientRepository;
    private final RestTemplate restTemplate = new RestTemplate();
    private final Faker faker = new Faker();
    private final Random random = new Random();
    private final String AUTH_SERVICE_URL = "http://localhost:8082/auth";

    public TestDataInitializer(AccountRepository accountRepository,
                               ClientRepository clientRepository) {
        this.accountRepository = accountRepository;
        this.clientRepository = clientRepository;
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

        for (int i = 0; i < 10; i++) {
            try {
                String fullName = faker.name().fullName();
                String phone = "+79" + (random.nextInt(900000000) + 100000000);
                String username = "user" + (i + 1);
                String password = "pass" + (i + 1);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username
                Optional<Client> existingClient = clientRepository.findByUsername(username);
                Client client;
                if (existingClient.isPresent()) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    client = existingClient.get();
                    System.out.println("‚è≠Ô∏è –ö–ª–∏–µ–Ω—Ç —Å username " + username + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
                } else {
                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    System.out.println("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + username + " | –¢–µ–ª–µ—Ñ–æ–Ω: " + phone);

                    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ auth-—Å–µ—Ä–≤–∏—Å–µ
                    String registerUrl = AUTH_SERVICE_URL + "/register?fullName=" + fullName
                            + "&phone=" + phone
                            + "&username=" + username
                            + "&password=" + password;

                    String response = restTemplate.postForObject(registerUrl, null, String.class);
                    System.out.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + response);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª –ª–∏ auth-—Å–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–∞
                    existingClient = clientRepository.findByUsername(username);
                    if (existingClient.isPresent()) {
                        // Auth-—Å–µ—Ä–≤–∏—Å —É–∂–µ —Å–æ–∑–¥–∞–ª –∫–ª–∏–µ–Ω—Ç–∞
                        client = existingClient.get();
                        System.out.println("‚úÖ –ö–ª–∏–µ–Ω—Ç " + username + " —Å–æ–∑–¥–∞–Ω auth-—Å–µ—Ä–≤–∏—Å–æ–º");
                    } else {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ auth-—Å–µ—Ä–≤–∏—Å –µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–ª
                        client = new Client(fullName, phone, username, password);
                        client = clientRepository.save(client);
                        System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: " + fullName + " (" + phone + ") | –õ–æ–≥–∏–Ω: " + username + ", –ü–∞—Ä–æ–ª—å: " + password);
                    }
                }

                // –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ (1-3 —Å—á–µ—Ç–∞) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                int accountCount = random.nextInt(3) + 1;
                for (int j = 0; j < accountCount; j++) {
                    Account account = new Account();
                    double initialBalance = random.nextInt(9000) + 1000;
                    account.setBalance(initialBalance);
                    account.setClient(client);
                    account.setAccountNumber(String.format("%012d", random.nextInt(1000000000) + 1000000000));
                    account.setCardNumber(String.format("%016d", random.nextLong(1000000000000000L, 9999999999999999L)));
                    accountRepository.save(account);
                    System.out.println("  ‚ûï –°—á–µ—Ç: " + account.getAccountNumber() + " | –ë–∞–ª–∞–Ω—Å: " + initialBalance + "‚ÇΩ");
                }

            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + (i+1) + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
        System.out.println("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }
}